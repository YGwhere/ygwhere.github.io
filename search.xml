<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo 写作规范</title>
    <url>/2021/03/10/hexoStudy/</url>
    <content><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。</p>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ul>
<li><p>创建一篇新文章：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new [layout] &lt;title&gt;<br>$ hexo new <span class="hljs-string">&quot;post title with whitespace&quot;</span> -p about/me <span class="hljs-comment"># == --path 自定义新文章的路径</span><br>$ hexo new <span class="hljs-string">&quot;post title with whitespace&quot;</span> -s ptww <span class="hljs-comment"># == --slug 文章的 Slug，作为新文章的文件名和发布后的 URL</span><br></code></pre></td></tr></table></figure>
<p><code>[layout]</code>：页面布局，可取值：<code>post</code> (默认)、<code>page</code>、<code>draft</code>，对应的存放路径分别为<code>source/_post</code>、<code>source</code>、<code>source/_drafts</code>；</p>
<p><code>&lt;title&gt;</code>：文章标题，当标题含有空格时，应用<code>&quot;&quot;</code>括起来</p>
</li>
<li><p>生成静态文件 (<code>pulic</code>)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate <br>$ hexo g<br>$ hexo g -d <span class="hljs-comment"># 文件生成后立即部署网站</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>启动服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br>$ hexo s	<span class="hljs-comment"># 默认访问路径为: http://localhost:4000/</span><br>$ hexo s -p <span class="hljs-comment"># 重设端口	  == --port</span><br>$ hexo s -l <span class="hljs-comment"># 启动日志记录 == --log</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>部署网站：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br>$ hexo d<br>$ hexo d -g <span class="hljs-comment"># 部署之前预生成静态文件</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo clean<br></code></pre></td></tr></table></figure>
</li>
<li><p>列出网站资料（<code>page</code>、<code>post</code>、<code>tag</code>等)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo list &lt;<span class="hljs-built_in">type</span>&gt;  <span class="hljs-comment"># == l</span><br></code></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h1><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">常用参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>title</code></td>
<td style="text-align:center">标题</td>
</tr>
<tr>
<td style="text-align:center"><code>date</code></td>
<td style="text-align:center">建立日期</td>
</tr>
<tr>
<td style="text-align:center"><code>update</code></td>
<td style="text-align:center">更新日期</td>
</tr>
<tr>
<td style="text-align:center"><code>tags</code></td>
<td style="text-align:center">标签</td>
</tr>
<tr>
<td style="text-align:center"><code>categories</code></td>
<td style="text-align:center">分类</td>
</tr>
<tr>
<td style="text-align:center"><code>permalink</code></td>
<td style="text-align:center">覆盖文章网址</td>
</tr>
</tbody>
</table>
</div>
<h2 id="分类与标签"><a href="#分类与标签" class="headerlink" title="分类与标签"></a>分类与标签</h2><p>分类具有顺序性和层次性，而标签可同时存在多个</p>
<p>使用方式：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 第一种方式</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Diary</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">PS3</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Games</span><br><br><span class="hljs-comment"># 第二种方式</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">Diary</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">PS3</span>, <span class="hljs-string">Games</span>]<br></code></pre></td></tr></table></figure>
<h2 id="Fluid-专用的页面属性"><a href="#Fluid-专用的页面属性" class="headerlink" title="Fluid 专用的页面属性"></a>Fluid 专用的页面属性</h2><p>本页面采用的主题为 <a href="https://fluid-dev.github.io/">Fluid</a>，可通过在 Front-matter 中单独配置页面属性：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Fluid参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>banner_img</code></td>
<td style="text-align:center">页面顶部大图</td>
</tr>
<tr>
<td style="text-align:center"><code>banner_img_height</code></td>
<td style="text-align:center">页面顶部图高(60)</td>
</tr>
<tr>
<td style="text-align:center"><code>banner_mask_alpha</code></td>
<td style="text-align:center">顶部图的透明度(0.5)</td>
</tr>
<tr>
<td style="text-align:center"><code>excerpt</code></td>
<td style="text-align:center">文件摘要(默认为自动摘要)</td>
</tr>
<tr>
<td style="text-align:center"><code>hide</code></td>
<td style="text-align:center">隐藏文章(true)</td>
</tr>
<tr>
<td style="text-align:center"><code>stcky</code></td>
<td style="text-align:center">文章排序(100)，数字越大越靠前</td>
</tr>
<tr>
<td style="text-align:center"><code>index_img</code></td>
<td style="text-align:center">文章在首页的封面图</td>
</tr>
</tbody>
</table>
</div>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>正文中一般使用 <code>Markdown</code> 格式，这里推荐 <a href="https://typora.io/">Typora</a></p>
<p>以下方法皆是 Fluid 内置语法格式：</p>
<h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">正文<br>这是一句话[^1]<br><br><span class="hljs-section">## 参考</span><br>[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">参考资料1</span><br>[<span class="hljs-symbol">^2</span>]: <span class="hljs-link">参考资料2</span><br></code></pre></td></tr></table></figure>
<h2 id="Tag插件"><a href="#Tag插件" class="headerlink" title="Tag插件"></a>Tag插件</h2><h3 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">&#123;% note success %&#125;<br>文字 或者 <span class="hljs-code">`markdown`</span> 均可<br>&#123;% endnote %&#125;<br><br>&#123;% note success %&#125; 与 &#123;% endnote %&#125; 需单独成行<br></code></pre></td></tr></table></figure>
<p>可选便签：</p>
<div class="note note-primary">
            <p>primary</p>
          </div>
<div class="note note-secondary">
            <p>secondary</p>
          </div>
<div class="note note-success">
            <p>success</p>
          </div>
<div class="note note-danger">
            <p>danger</p>
          </div>
<div class="note note-warning">
            <p>warning</p>
          </div>
<div class="note note-info">
            <p>info</p>
          </div>
<div class="note note-light">
            <p>light</p>
          </div>
<h3 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">&#123;% label primary @text %&#125;<br>text 为标签内容，且 text 不能以 @ 开头<br></code></pre></td></tr></table></figure>
<p>可选 Label ：</p>
<span class="label label-primary">primary</span> <span class="label label-default">default</span> <span class="label label-info">info</span> <span class="label label-success">success</span> <span class="label label-warning">warning</span> <span class="label label-danger">danger</span> 
<h3 id="勾选框"><a href="#勾选框" class="headerlink" title="勾选框"></a>勾选框</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">&#123;% cb text, checked?, incline? %&#125;<br><br>text : 显示的文字<br>checked : 默认是否已勾选，默认 false<br>incline : 是否内联，（可以理解为后面的文字是否换行），默认 false<br></code></pre></td></tr></table></figure>
<div>
            <input type="checkbox" disabled >普通示例
          </div> <div>
            <input type="checkbox" disabled checked="checked">默认选中
          </div>
<h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">&#123;% btn url, text, title %&#125;<br><br>url : 跳转链接<br>text : 显示的文字<br>title : 鼠标悬停时显示的文字（可选）<br></code></pre></td></tr></table></figure>
<a class="btn" href="https://fluid-dev.github.io/"  title="Fluid官网" target="_blank">Fluid</a>
<h3 id="组图"><a href="#组图" class="headerlink" title="组图"></a>组图</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">&#123;% gi total n1-n2-... %&#125;<br>  ![](url)<br>  ![](url)<br>  ![](url)<br>  ![](url)<br>  ![](url)<br>&#123;% endgi %&#125;<br><br>total : 图片总数量，对应中间包含的图片 url 数量<br>n1-n2-... : 每行的图片数量，可以省略，默认单行最多 3 张图，求和必须相等于 total，否则按默认样式<br>例如 : &#123;% gi 5 3-2 %&#125;<br></code></pre></td></tr></table></figure>
<h1 id="使用-jsdelivr-amp-amp-GitHub-图床"><a href="#使用-jsdelivr-amp-amp-GitHub-图床" class="headerlink" title="使用 jsdelivr &amp;&amp; GitHub 图床"></a>使用 jsdelivr &amp;&amp; GitHub 图床</h1><p>jsdelivr 是一个免费的公用 CDN，可用于加速静态资源的访问速度</p>
<p>使用方式：</p>
<ol>
<li><p>在 GitHub 创建一个公开仓库用于存放 GitHub Pages 的静态资源 (例如 jpg，png，js等文件)；<br>Gitee 也可以，但 Gitee 每次仅能上传 1M 以内的文件，这里采用 GitHub</p>
</li>
<li><p>拉取到本地，编辑图床文件目录结构，并使用 Git 管理图片文件；</p>
</li>
<li><p>上传到 GitHub，使用 jsDeliver 进行访问，并将该链接作为 <code>Markdown</code> 中图片的 <code>URL</code>；</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>GitHub用户名/图床仓库<br></code></pre></td></tr></table></figure>
</li>
<li><p>部署到 GitHub 上后，访问 GitHub Pages 时静态资源将 通过 jsDeliver 进行加速</p>
</li>
</ol>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>同时，Fluid 中内置 LaTeX 数学公式（或 hexo 5.0 以上使用官方插件 hexo-math），Mermaid 流程图等，但并不常用，所以不做演示，以后需要再记录。</p>
<p><strong>建议</strong>：由于GitHub 上存储 GitHub Pages 时，仅存储每次 hexo 生成的静态资源，而全部的 <code>Markdown</code> 文件仍存放在本地，因此建议将 hexo 的 blog 文件夹也上传为一个私有的 GitHub 或 Gitee 仓库，并定期上传更改。保证即使本地文件损坏，也能快速恢复。（别问我为什么这么熟练 o(╥﹏╥)o）</p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p>Fluid 官方文档 ： <a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/">https://fluid-dev.github.io/hexo-fluid-docs/guide/</a></p>
<p>Hexo 官方文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p>
]]></content>
      <categories>
        <category>others</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>物理层概述</title>
    <url>/2021/04/19/network/Frame/</url>
    <content><![CDATA[<blockquote>
<p>物理层（Physical Layer）作为计算机网络 OSI 模型中最低的一层，关注点在于如何为数据端设备提供传送数据的通路，同时传输数据。</p>
</blockquote>
<h1 id="一、物理层概述"><a href="#一、物理层概述" class="headerlink" title="一、物理层概述"></a>一、物理层概述</h1><p>对于物理层协议，一般称之为<strong>规程</strong>，物理层传输数据的单位为<strong>比特(bit)</strong>，则，物理层的任务为如何将 0 或 1 传输到接收方。</p>
<p>物理层的接口的特性：</p>
<ol>
<li>机械特性：指明接口所用的接线器的形状和尺寸、引线数目和排列、固定和锁定装置等等。<u><strong><em>使硬件部分具有通用性</em></strong></u>；</li>
<li>电气特性：指明在接口电缆的各条线上出现的电压的范围。<u><strong><em>创建不同的编码组合，用于对 0 1 进行编码</em></strong></u></li>
<li>功能特性：指明某条线上出现的某一电平的电压表示何意。<u><strong><em>用于对  0 1 进行编码与译码</em></strong></u></li>
<li>规程特性：指明规定建立连接时各个相关部件的工作步骤。<u><strong><em>使接收与发送具有规范性</em></strong></u></li>
</ol>
<h1 id="二、数据通信基础知识"><a href="#二、数据通信基础知识" class="headerlink" title="二、数据通信基础知识"></a>二、数据通信基础知识</h1><h2 id="1、数据通信系统模型"><a href="#1、数据通信系统模型" class="headerlink" title="1、数据通信系统模型"></a>1、数据通信系统模型</h2><p>一个数据通信系统可分为三部分：源系统（源点+发送器）、传输系统、目的系统（接收器+终点）</p>
<p><img src="https://cdn.jsdelivr.net/gh/YGwhere/JsdelivrCDN/img/CN/frame/1.png" alt=""></p>
<p>PC机发送的数据将被编码为 0 1 组成的字符串（通过类似ASCII码之类的形式）作为数字比特流，传输给调制解调器，调制器作为一个发送器，将数字比特流转换为模拟信号，通过公共电话网即传输系统传输到目的系统，目的系统中的接收器即解调器将模拟信号解调为数字比特流，传输到终点解码显示。</p>
<h2 id="2、相关概念"><a href="#2、相关概念" class="headerlink" title="2、相关概念"></a>2、相关概念</h2><ol>
<li><p><strong>消息</strong>：通信的目的就是传送消息，如视频，语音等都是消息；</p>
</li>
<li><p><strong>数据</strong>：运送消息的实体，使用特定的方式表示消息；</p>
</li>
<li><p><strong>信号</strong>：数据的电气或电磁的表现；<br>根据信号中代表消息的参数取值方式的不同可分为两大类：</p>
<ol>
<li>模拟信号(联系信号)：取值连续；</li>
<li>数字信号(离散信号)：取值离散，代表不同离散数值的基本波形称为<strong>码元</strong><br>在二进制编码中，0 与 1 就是仅有的两中码元；</li>
</ol>
</li>
<li><p><strong>信道</strong>：向某一方向传送信息的媒体，一条信道通常包含一条发送信道与一条接收信道：<br>就通信双方信息交互的方式而言：</p>
<ol>
<li><strong>单向通信</strong>（单工通信）：只有一个方向的通信而不存在反方向交互；</li>
<li><strong>双向交替通信</strong>（半双工通信）：双方都可发送与接收，但不能同时发送或同时接收消息；</li>
<li><strong>双向同时通信</strong> （全双工通信）：双方可同时发送与接收；</li>
</ol>
</li>
<li><p><strong>基带信号与带通信号</strong>：</p>
<ol>
<li>基带信号：基本频带信号，来自信源的信号，例如说话时的声波；</li>
<li>带通信号：基带信号经过载波调制得到的信号；</li>
</ol>
</li>
<li><p><strong>调制</strong>：</p>
<ol>
<li><p>编码：基带调制，将一种数字信号转换为另一种数字信号；</p>
<p>常用编码方式：不归零制、 归零制、曼彻斯特编码、差分曼彻斯特编码</p>
</li>
<li><p>带通调制：使用载波将数字信号转换为模拟信号；<br>基本的带通调制方法：调幅（AM）、调频（FM）、调相（PM）、正交振幅调制QAM</p>
</li>
</ol>
</li>
</ol>
<h1 id="三、物理层下的传输媒体"><a href="#三、物理层下的传输媒体" class="headerlink" title="三、物理层下的传输媒体"></a>三、物理层下的传输媒体</h1><h2 id="1、导引型传输媒体"><a href="#1、导引型传输媒体" class="headerlink" title="1、导引型传输媒体"></a>1、导引型传输媒体</h2><p>导引型传播媒体分为双绞线、同轴电缆、光纤、架空明线等</p>
<h2 id="2、非引导型传输媒体"><a href="#2、非引导型传输媒体" class="headerlink" title="2、非引导型传输媒体"></a>2、非引导型传输媒体</h2><p>非导向传输媒体就是指自由空间，其中的电磁波传输被称为无线传输。</p>
<h1 id="四、信道复用技术"><a href="#四、信道复用技术" class="headerlink" title="四、信道复用技术"></a>四、信道复用技术</h1><h2 id="1、频分复用与时分复用"><a href="#1、频分复用与时分复用" class="headerlink" title="1、频分复用与时分复用"></a>1、频分复用与时分复用</h2><p><strong>频分复用FDM</strong>：用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带；其中所有用户在同样的时间占用不同的带宽资源（请注意，这里的“带宽”是频率带宽而不是数据的发送速率）</p>
<p><strong>时分复用TDM</strong>：按时间轮流分配带宽资源给不同的用户，每个用户只在分配的时间里使用线路传输数据；所有用户在不同的时间占用同样的频带宽度</p>
<p><strong>统计时分复用STDM</strong>：也叫异步时分复用，改进版时分复用，采用<strong>集中器</strong>将多用户发送的数据存储在缓存中，依次读取，集中为一条数据。</p>
<h2 id="2、波分复用"><a href="#2、波分复用" class="headerlink" title="2、波分复用"></a>2、波分复用</h2><p>将一系列波长不同的光信号，使用<strong>光复用器</strong>合成一束，沿单根光纤传输，在接收端使用<strong>光分用器</strong>，将不同波长的光信号分开。</p>
<h2 id="3、码分复用"><a href="#3、码分复用" class="headerlink" title="3、码分复用"></a>3、码分复用</h2><p>技术上叫<strong>码分多址CDMA</strong>，为<strong>扩频</strong>通信中的<strong>直接序列扩频DSSS</strong>，在无线LAN和蜂窝技术中应用比较广泛。</p>
<p>原理上，通过对每个要发送的比特都乘以一个<strong>码片序列</strong>（编码）的比特进行编码，而该码片序列的变化速率（<strong>码片速率</strong>）比数据比特序列的变化速率快得多，从而使每个数据比特都将对应多个编码比特。同时要保证每个码片序列都不同且相互正交。</p>
<p>下图为一个简化的CDMA编码/解码。假设干扰的传输比特信号是加性的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/YGwhere/JsdelivrCDN/img/CN/frame/2.png" alt=""></p>
<p>对数据比特到达CDMA编码器的速率定义了时间单元，从而划分时隙，同时将每个比特时隙划分为 $M$ 个微时隙，通过</p>
<script type="math/tex; mode=display">
Z_{i,m} = d_i \cdot c_m</script><p>获得信号输出  $ Z_{i,m} $ 。当到达接收端时，使用</p>
<script type="math/tex; mode=display">
d_i = \frac{1}{M} \sum^{M}_{m = 1} Z_{i,m} \cdot c_m</script><p>获得原数据。</p>
<p>下图为当存在两个发送方时发生干扰时的解码：</p>
<p><img src="https://cdn.jsdelivr.net/gh/YGwhere/JsdelivrCDN/img/CN/frame/3.png" alt=""></p>
<p>图中演示了接收方无视发送方2的干扰传输，而是只提取发送方1的数据。根据传入的比特信号可加性，推出下面公式：</p>
<script type="math/tex; mode=display">
Z_{i,m}^* = \sum_{s = 1}^{N} Z^s_{i,m}</script><p>获得接收方接收的数据比特，并采用公式</p>
<script type="math/tex; mode=display">
d_i = \frac{1}{M} \sum^M_{m = 1} Z^*_{i,m} \cdot c_m</script><p>对发送方1的数据进行分离。</p>
<p><strong>公式原理</strong>：只研究时隙 $1$ 时发送的数据，假设发送方1对应的编码为 $A_i$ ，则 $ A_i = (1,1,1,-1,1,-1,-1,-1)$ ，同样发送方2对应的编码为 $ B_i = (1,-1,1,1,1,-1,1,1) $ ，而对于 $A_i$  与  $B_i$ ，其应该不认同且相互<strong>正交</strong>。由公式$(3)$得到的发送数据则为 $ S_i =d_i^1 \cdot A_i + d_i^2 \cdot B_i=(0,-2,0,2,0,0,2,2)$ ，而公式$(4)$的分子对于单个时隙中的数据而言，为向量的点乘</p>
<script type="math/tex; mode=display">
\begin{align}
\sum^M_{m = 1} Z^*_{i,m} \cdot c_m & = S_i \cdot A_i \\ 
                                   & = d_i^1 \cdot A_i \cdot A_i + d_i^2 \cdot B_i \cdot A_i \\
                                   & = d_i^1 \cdot A_i \cdot A_i \\
                                   & = d_i^1 \cdot |A_i|^2
\end{align}</script><p>而 $M$ 为微时隙个数，在例子中 $M = 8$ ，且 $A_i$ 中元素都为 $1$ 或 $-1$ ，可知：</p>
<script type="math/tex; mode=display">
M = |A_i|^2</script><p>则可得：</p>
<script type="math/tex; mode=display">
d_i = \frac{1}{M} \sum^M_{m = 1} Z^*_{i,m} \cdot c_m</script><h1 id="五、宽带接入技术"><a href="#五、宽带接入技术" class="headerlink" title="五、宽带接入技术"></a>五、宽带接入技术</h1><p>通过宽带接入的媒体划分，一类为<strong>有线宽带接入</strong>，一类为<strong>无线宽带接入</strong>。在此只讨论有线宽带接入：</p>
<h2 id="1、拨号接入"><a href="#1、拨号接入" class="headerlink" title="1、拨号接入"></a>1、拨号接入</h2><p>电话拨号上网，通过安装在计算机上的<strong>调制解调器</strong>，将信号转换为音频信号，从已有的电话网线来传播数据。（互联星空|*´Å`)ﾉ </p>
<p>缺点：上网速率低，不能同时打电话与上网，上网费用高。</p>
<h2 id="2、ADSL技术"><a href="#2、ADSL技术" class="headerlink" title="2、ADSL技术"></a>2、ADSL技术</h2><p><strong>非对称数字用户线ADSL</strong>：用数字技术对现有的模拟电话用户线进行改造。</p>
<p>特性：</p>
<ul>
<li>非对称性：体现在下行（从ISP到用户）宽带都远大于上行（从用户到ISP）；</li>
<li>传输距离取决于数据率与用户的线径；</li>
<li>通过将低端频谱留给传统电话，而将高端频谱留给用户上网使用，实现上网、打电话互不干扰；</li>
</ul>
<p>实现：通过在用户线两端安装一个ADSL调制器（实现方案有多种，我国采用的是<strong>离散多音调DMT</strong>调制技术），从而区分低频与高频。</p>
<p>基于ADSL的接入网由：数字用户线接入复用器DSLAM、用户线、与相关上网设施组成。</p>
<p><img src="https://cdn.jsdelivr.net/gh/YGwhere/JsdelivrCDN/img/CN/frame/4.png" alt=""></p>
<p><strong>xDSL技术</strong>是数字用户线路的所有类型的总称，包括RADSL、SDSL、HDSL、ADSL、VDSL和IDSL等。</p>
<h2 id="3、光纤同轴混合网"><a href="#3、光纤同轴混合网" class="headerlink" title="3、光纤同轴混合网"></a>3、光纤同轴混合网</h2><p><strong>光纤同轴混合网（HFC网）</strong>：结合光纤与同轴电缆的宽带接入网，以频分复用为基础。将有线电视网中的同轴电缆主干部替换为光纤，而在光纤连接到<strong>光纤节点</strong>（将光信号转换为电信号），然后通过同轴电缆传送到用户。</p>
<p><img src="https://cdn.jsdelivr.net/gh/YGwhere/JsdelivrCDN/img/CN/frame/5.png" alt=""></p>
<p>通过<strong>机顶盒</strong>将数字电视信号从同轴电缆传递给电视机，同时在用户端安装一个为HFC网使用的<strong>电缆调制解调器</strong>（电缆调制解调器规约DOCSIS）。</p>
<h2 id="4、FTTx技术"><a href="#4、FTTx技术" class="headerlink" title="4、FTTx技术"></a>4、FTTx技术</h2><p><strong>宽带光纤接入方式FTTx</strong>：Firber To The，x 代表接入地点，FTTH则为光纤到户。同样还有FTTC（路边）、FTTZ（小区）、FTTF（楼层）、FTTO（办公室）、FTTD（桌面）等。</p>
<p><img src="https://cdn.jsdelivr.net/gh/YGwhere/JsdelivrCDN/img/CN/frame/6.png" alt=""></p>
]]></content>
      <categories>
        <category>Computer Network</category>
      </categories>
  </entry>
  <entry>
    <title>计网相关概率</title>
    <url>/2021/06/17/network/notion/</url>
    <content><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><p>信息时代的核心就是网络，而熟悉的网络有：<strong>电信网络</strong>、<strong>有线电视网</strong>络和<strong>计算机网络</strong>，而计算机网络中发展和影响最大的当属 <strong>Internet</strong>（译作因特网或互联网）。</p>
<h2 id="互联网的组成"><a href="#互联网的组成" class="headerlink" title="互联网的组成"></a>互联网的组成</h2><p>计算机网络由<strong>节点结</strong>(node) 和<strong>链路</strong>(link) 组成，而<strong>互连网</strong>则是由多个网络与路由器组成的网络，而通过TCP/IP协议使得计算机都能通过互连网通信，就形成了<strong>互联网</strong>。（Internet为特指，而internet为泛指）</p>
<p>而互联网主要划分为<strong>边缘部分</strong>（用户直接使用）和<strong>核心部分</strong>（为边缘部分提供服务）</p>
<p>边缘部分：将接入互联网的设备称为<strong>主机</strong>或<strong>端系统</strong>，端系统通过<strong>因特网服务提供商（ISP）</strong>接入因特网，端系统之间一般通过<strong>C/S方式</strong>或者<strong>P2P方式</strong>进行通讯。</p>
<p>接入网AN：端系统通过物理连接到<strong>边缘路由器</strong>形成的网络。</p>
<p>核心部分：主要实现的功能是端系统之间数据的交换。其有两种方法：</p>
<ul>
<li><strong>分组交换</strong>：交换端系统之间的<strong>报文</strong>，对长报文划分为小报文，则为<strong>分组</strong>。而分组从发送源到目的地中除了经过通信链路，还需要经过<strong>分组交换机</strong>（包括<strong>路由器</strong>和<strong>链路交换机</strong>）。分组发送到路由器，而路由器获得分组后将通过目的地的IP地址和<strong>路由选择协议</strong>计算出分组将转发到哪条链路上。</li>
<li><strong>电路交换</strong>：其在端系统之间建立一条专用的<strong>端对端连接</strong>，在通信结束前将一直占用资源（缓存，链路传输速率），而连接电路的实现是通过<strong>频分复用FDM</strong>或者<strong>时分复用TDM</strong>等来实现的，从而将物理链路划分为端系统之间专用的连接。</li>
</ul>
<h2 id="互联网的网络结构"><a href="#互联网的网络结构" class="headerlink" title="互联网的网络结构"></a>互联网的网络结构</h2><p><strong>互联网服务提供商ISP</strong>：将接入ISP的作为<strong>客户</strong>，而传输ISP作为<strong>提供商</strong>，三层ISP结构则一般指的是主干ISP（第一层），区域ISP，本地ISP。常见的第一层ISP有国内的中国电信、联通、移动、长城等与美国四大运营商等。不同的第一层ISP直接属于<strong>竞争</strong>关系，而除第一层ISP外，其他ISP可以采取<strong>多宿</strong>与多个提供商ISP连接，同时，相同等级结构的一对ISP能够进行<strong>对等</strong>，将其网络连接到一起从而免去之间的流量费用。</p>
<p><strong>互联网交换点IXP</strong>：第三方客户可以创建一个IXP将多个ISP在此对等。</p>
<p><strong>内容提供商网络</strong>：其通过建立专用的TCP/IP网络，独立于公共互联网，仅承载进入其服务器的流量，从而减少对顶层ISP支付的费用。</p>
<p><img src="https://cdn.jsdelivr.net/gh/YGwhere/JsdelivrCDN/img/CN/notion/1.jpg" alt=""></p>
<h1 id="时延、丢包与吞吐量"><a href="#时延、丢包与吞吐量" class="headerlink" title="时延、丢包与吞吐量"></a>时延、丢包与吞吐量</h1><p><strong>带宽</strong>：单位时间内某<strong>信道</strong>所能经过的<strong>最高数据率</strong>，单位为比特每秒 $bit/s$；</p>
<p><strong>吞吐量</strong>：单位时间内通过某个网络（或信道、接口等）的<strong>实际数据量</strong>，其受到带宽的限制，常用每秒传输的比特($bit/s$)/字节数($byte/s$)/帧数表示；</p>
<p><strong>时延</strong>：分组网络中比较重要的时延有：</p>
<ul>
<li><strong>处理时延</strong>：部分为路由器检查分组首部与确定分组导向链路所产生的时延；</li>
<li><strong>排队时延</strong>：在队列中，在路由器中等待传输时产生的时延，对于特定分组，其排队时延取决于在其之前到达的正在等待传输的分组数量，若队列为空，且没有分组正在传输，则排队时延为0；</li>
<li><strong>传输时延</strong>：将一个分组传输出路由器所需的时间，仅取决于分组长度 $L\ bit$ 与相邻路由器之间链路传输速率 $R\ bps\ (即b/s)$ ，则传输时延 $d_{trans}=L/R$ ；</li>
<li><strong>传播时延</strong>：从链路起点到目的路由器所需时间，传播速率仅取决于该链路的物理媒体（即光纤、双绞铜线等），而传播时延仅取决于传播速率 $s$ 与两路由器之间的物理距离 $d$ ，$d_{prop} = d/s$；</li>
<li>而总时延一般等于 $d<em>{nodal} = d</em>{proc} + d<em>{queue} + d</em>{trans} + d_{prop}$，</li>
</ul>
<p><strong>流量强度</strong>：用于估计排队时延的范围，用 $a\ pkt/s\ (即分组/秒)$ 表示分组到达队列的平均速率，$R$ 为传输速率，假定所有分组长度都为 $L\ bit$ ，则比特到达队列的平均速率为 $La\ bps$，假设队列无限大，流量强度则为 $La/R$。而当 $La/R&gt;1$ 时，队列中分组将无限增大。</p>
<p><strong>丢包</strong>：由于路由器中缓存有限，即队列长度有限，则当队列填满时，将丢弃分组。</p>
<p><em>PS：可通过 Traceroute （ Windows 下程序名为 tracert ）测量某目的地到本地主机中经过的路由器中发生的时延。</em></p>
<h1 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h1><p>网络协议指的是计算机网络中互相通信的对等实体之间交换信息时所必须遵守的规则的集合。用于约定多个通信实体之间交换的报文格式和顺序，以及报文发送和/或接收一条报文或其他事件所采用的动作。</p>
<h2 id="协议分层"><a href="#协议分层" class="headerlink" title="协议分层"></a>协议分层</h2><p>网络协议采用<strong>分层</strong>的体系结构，每层向上层提供<strong>服务</strong><br>优点： </p>
<ol>
<li>各层之间是独立的。某一层并不需要知道它下一层是如何实现的，而仅仅需要知道该层通过层间的接口所提供的服务。由于每一层只实现一种相对独立的功能，因而可以将一个难以处理的复杂问题分解为若干个较容易处理的更小问题，这样，整个问题的复杂度就下降了；</li>
<li>灵活性好，可以降低层与层之间的依赖。当任何一层发生变化时，只要层间接口关系保持不变，则在这层以上或以下各层均不受影响，此外，对某一层提供的服务还可以进行修改。当某层提供的服务不再需要时，甚至可以将这层取消；</li>
<li>结构上可分割开。各层都可以采用最合适的技术来实现；</li>
<li>易于实现和维护。这种结构使得实现和调试一个庞大而又复杂的系统变得易于处理，因为整个系统已被分解为若干个相对独立的子系统；</li>
<li>能促进标准化工作。因为每一层的功能及其所提供的服务都已有了精确的说明；</li>
</ol>
<p>缺点：</p>
<ol>
<li>可能会冗余较低层的功能；</li>
<li>某层的功能需要其他层才出现的信息，违背层次分离目标；</li>
</ol>
<p>而各层所有协议称为<strong>协议栈</strong>，互联网的协议栈由5层组成，自顶向下依次为：<strong>应用层</strong>，<strong>传输层</strong>，<strong>网络层</strong>，<strong>数据链路层</strong>，<strong>物理层</strong>。而按照ISO划分的7层OSI模型的协议栈，将应用层拆分为应用层与<strong>表示层</strong>，传输层拆分为<strong>会话层</strong>与传输层。</p>
<h2 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h2><p>数据封装（Data Encapsulation）是指将协议数据单元（PDU）封装在一组协议头和尾中的过程。在5层网络模型中，发送端经历了：<strong>应用层报文</strong>作为数据传输到传输层，传输层在其首部加上控制信息（例如TCP的报文头），与应用层报文一起构成<strong>运输层报文段</strong>，网络层接收到报文段后在其首部添加上源和目的端地址等网络层首部信息（IP头部）构成<strong>网络层数据报</strong>（包），而数据链路层再将其作为数据，并在其首尾添加MAC头部与尾部构成<strong>链路层帧</strong>，最后将帧交给物理层，物理层将其转换为比特流进行传输。</p>
<p>对于每一层，一个分组由首部字段与<strong>有效荷载字段</strong>构成，有效荷载通常为来自上一层的分组。</p>
<p>接收端从下往上，依次去除对应层的附加信息，并将数据部分传递给上一层。</p>
<p><img src="https://cdn.jsdelivr.net/gh/YGwhere/JsdelivrCDN/img/CN/notion/2.jpg" alt=""></p>
]]></content>
      <categories>
        <category>Computer Network</category>
      </categories>
  </entry>
  <entry>
    <title>TCP 的三次握手与四次挥手</title>
    <url>/2021/03/16/network/tcphandshake/</url>
    <content><![CDATA[<blockquote>
<p>TCP (Transmission Control Protocol) 传输控制协议，是一种面向连接的、可靠的、基于字节流的传输层通信协议。与 IP (网际协议，Internet Protocol) 共为计算机网络中最具代表性的协议，熟知它是一个程序猿必备的知识。</p>
</blockquote>
<h1 id="FSM-的变换"><a href="#FSM-的变换" class="headerlink" title="FSM 的变换"></a>FSM 的变换</h1><p>FSM (有限状态机，Finite-State Machine)，为研究 TCP 与 UDP 的传输中发送方与接收方的状态变换而定义的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/YGwhere/JsdelivrCDN/img/CN/transport/tcphandshake/1.png" alt="FSM"></p>
<h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p>先研究图中的上半部分——<strong>三次握手</strong></p>
<ol>
<li><strong>第一次握手</strong> ：打开服务器，进入监听状态(Listen)；然后客户端主动(active open)连接(connect)服务器，发送 SYN<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="同步序列编号（Synchronize Sequence Numbers）
">[1]</span></a></sup> 包（假设 seq = j），进入 SYN_SENT 状态 。同时，对于客户端与服务器而言，这两种状态都是阻塞的，即当前线程无法进入下一步骤；<br>若双方在此过程中关闭，将进入Closed状态；</li>
<li><strong>第二次握手</strong> ：当服务器接收到 SYN 包时，将进入 SYN_RECEIVED 状态，并发送 SYN + ACK 包（发送一个 ack = j+1 且 seq = k 的 SYN 包）；</li>
<li><strong>第三次握手</strong> ：客户端接收到来自服务器的 SYN + ACK 包后，发送 ACK 包(ack = k+1)，当服务端接收到 ACK 包后，双方将进入 ESTABLISHED 状态，开始进行数据交互；</li>
<li>当服务端在 SYN RECEIVED 状态时，接收到来自客户端的 RST 包时，将重置连接。一般来说，此时客户端与服务器端断开了连接；</li>
<li>同时打开(simultaneous open)连接和同时关闭(simultaneous)连接<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="相关阅读：https://blog.csdn.net/gettogetto/article/details/76794879
">[2]</span></a></sup>：一般用于NAT穿透，指通信的双方在接收到对方的SYN包之前，都进行了主动打开的操作并发出了自己的SYN包。</li>
</ol>
<h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p>再研究图中下半部分——<strong>四次挥手</strong></p>
<ol>
<li><strong>第一次挥手</strong> ：数据传输结束后双方都可以发出释放连接，图中假设服务器先主动(Active close)发送 FIN 包(seq = u)，进入 FIN-WAIT-1 状态，等待客户端确认；</li>
<li><strong>第二次挥手</strong> ：客户端接收到 FIN 包，并返回一个 ACK 包(ack = u+1，seq = v)，此时客户端被动(Passive close)进入 CLOSE-WAIT 状态；服务端收到确认后进入 FIN-WAIT-2 状态；<br>注意：此时服务端不再发送数据，但客户端仍然能够继续向服务端发送数据，且服务端正常接收，即终止等待时间；</li>
<li><strong>第三次挥手</strong> ：当客户端没有数据再向服务端发送时，其应用进程将通知 TCP 释放连接，并向服务端发送连接FIN 包(ack = u+1, seq = w)，此时客户端进入 LAST-WAIT 状态，等待服务端最后确认；</li>
<li><strong>第四次挥手</strong> ：服务端收到 FIN 包后进入 TIME-WAIT 状态，并返回一个 ACK 包(ack = w+1)，同时也是最后一个确认报文。但此时 TCP 连接并没有被释放，而是等待 <strong><em>2MSL</em></strong>（MSL ：报文段最长存活时间，超过该时间将被丢弃）后才会被释放。<br>客户端一旦收到确认，将进入 CLOSED 状态；2MSL 后服务端也将进入 CLOSED 状态，TCP 连接彻底结束。</li>
</ol>
<h1 id="实践出真知"><a href="#实践出真知" class="headerlink" title="实践出真知"></a>实践出真知</h1><p>使用 <a href="https://www.wireshark.org/">Wireshark</a> 进行传输层报文段的浏览<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="示例 wireshark 包下载地址
">[3]</span></a></sup></p>
<h2 id="TCP-报文段结构"><a href="#TCP-报文段结构" class="headerlink" title="TCP 报文段结构"></a>TCP 报文段结构</h2><p><img src="https://cdn.jsdelivr.net/gh/YGwhere/JsdelivrCDN/img/CN/transport/tcphandshake/2.jpg" alt="TCP 报文段"></p>
<p><img src="https://cdn.jsdelivr.net/gh/YGwhere/JsdelivrCDN/img/CN/transport/tcphandshake/3.png" alt="Wireshark 抓取的报文段"></p>
<p><em>以上报文段在 WSL2 中抓取</em></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>字段名</th>
<th>别名</th>
<th>具体作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>源端口号</td>
<td>Source Port</td>
<td>报文段的主机端口来源</td>
</tr>
<tr>
<td>目的端口</td>
<td>Destination Port</td>
<td>报文段的目的端口</td>
</tr>
<tr>
<td>序号</td>
<td>Sequence Number</td>
<td>32 比特，其中，raw为随机生成的数值，此后该 TCP 连接上发送序号该值递增；<br />而0，为在此 TCP 连接中的相对序号</td>
</tr>
<tr>
<td>确认号</td>
<td>Acknowledgment Number</td>
<td>32 比特，用于返回上次接收的 TCP 报文段的序号，实现可靠数据传输服务，同样分为相对值与实际值</td>
</tr>
<tr>
<td>首部字段长度</td>
<td>Header Length</td>
<td>4 比特，TCP 报文段由首部字段和一个数据字段构成，该字段指示了首部字段的长度，为空时首部字段长度为 20 字节</td>
</tr>
<tr>
<td>标志字段</td>
<td>Flags</td>
<td>6 比特，分为 CWR, ECE, URG, ACK, PSH, RST, SYN, FIN</td>
</tr>
<tr>
<td>接收窗口</td>
<td>Window</td>
<td>16 比特，用于指示接收方愿意接收的字节数量，用于实现 TCP 的流量控制服务</td>
</tr>
<tr>
<td>因特网检验和</td>
<td>Checksum</td>
<td>提供了差错检测功能，对报文段中所有 16 比特字的和进行反码运算，求和溢出都将回卷，即最小位+1</td>
</tr>
<tr>
<td>紧急数据指针</td>
<td>Urgent Pointer</td>
<td>16 比特，当紧急数据存在并给出指向紧急数据尾指针时，TCP 必须通知接收端的上方实体</td>
</tr>
<tr>
<td>选项</td>
<td>Options</td>
<td>用于发送方与接收方协商最大报文段长度(MSS)，其中还包含一个时间戳选项(Timestamps)</td>
</tr>
</tbody>
</table>
</div>
<h2 id="三次握手-1"><a href="#三次握手-1" class="headerlink" title="三次握手"></a>三次握手</h2><p><img src="https://cdn.jsdelivr.net/gh/YGwhere/JsdelivrCDN/img/CN/transport/tcphandshake/4.png" alt="三次握手"></p>
<h2 id="四次挥手-1"><a href="#四次挥手-1" class="headerlink" title="四次挥手"></a>四次挥手</h2><p><img src="https://cdn.jsdelivr.net/gh/YGwhere/JsdelivrCDN/img/CN/transport/tcphandshake/5.png" alt="四次挥手"></p>
<p><em>图中黑色为中间发送丢包操作</em></p>
<h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>同步序列编号（Synchronize Sequence Numbers）
<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>相关阅读：<a href="https://blog.csdn.net/gettogetto/article/details/76794879">https://blog.csdn.net/gettogetto/article/details/76794879</a>
<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://cdn.jsdelivr.net/gh/YGwhere/JsdelivrCDN/img/CN/transport/tcphandshake/tcpwarp.pcapng">示例 wireshark 包下载地址</a>
<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
      <categories>
        <category>Computer Network</category>
      </categories>
      <tags>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 使用指导</title>
    <url>/2021/03/11/tools/gitStudy/</url>
    <content><![CDATA[<p>什么是 <strong><a href="https://git-scm.com/">Git</a> </strong>? </p>
<blockquote>
<p>Git —- The stupid content tracker, 傻瓜内容跟踪器。</p>
<p>一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。</p>
</blockquote>
<h1 id="Git-工作流程"><a href="#Git-工作流程" class="headerlink" title="Git 工作流程"></a>Git 工作流程</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">                                  ┌────────────────┐<br>                              ┌───► git clone <span class="hljs-tag">&lt;<span class="hljs-name">URL</span>&gt;</span>│<br>                              │   └────────────────┘<br>   ┌────────────────────────┐ │<br>   │create a git repository ├─┤<br>   └───────────┬────────────┘ │<br>               │              │   ┌──────────────┐<br>               │              └───►   git init   │<br>               │update            └──────────────┘<br>               │delete<br>               │ add<br>               │<br>               │<br>┌──────────────▼────────────────────┐     ┌───────────────────┐<br>│ update the file of the repository ├──┬──► git add <span class="hljs-tag">&lt;<span class="hljs-name">filename</span>&gt;</span>│<br>└──────────────┬────────────────────┘  │  └───────────────────┘<br>               │                       │<br>               │                       │  ┌───────────────────┐<br>               │                       ├──►    git status     │<br>               │                       │  └───────────────────┘<br>               │                       │<br> ┌─────────────▼──────────────┐        │  ┌─────────────────────────┐<br> │ commit the update to stage ├────────┴──► git commit -m <span class="hljs-tag">&lt;<span class="hljs-name">message</span>&gt;</span> │<br> └─────────────┬──────────────┘           └─────────────────────────┘<br>               │<br>               │<br>               │<br>┌──────────────▼────────────────┐           ┌──────────┐<br>│ push the commit to repository ├───────────► git push │<br>└───────────────────────────────┘           └──────────┘<br></code></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/YGwhere/JsdelivrCDN/img/tools/gitStudy/1.jpg" alt=""></p>
<h1 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 Git</h1><p>使用命令 <code>git config</code> 来设置 Git 相关配置</p>
<h2 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在特定项目中使用用户信息，新设定将保存在当前项目的 .git/config 中</span><br>$ git config user.name <span class="hljs-string">&quot;ygwhere&quot;</span>			<span class="hljs-comment"># 配置个人用户名称</span><br>$ git config user.email ygwhere@gmail.com	<span class="hljs-comment"># 配置个人电子邮件地址</span><br><span class="hljs-comment"># --global 参数 : 将更改用户主目录下配置文件 .gitconfig，项目未指定情况下降使用全局设置</span><br></code></pre></td></tr></table></figure>
<h2 id="修改文本编辑器"><a href="#修改文本编辑器" class="headerlink" title="修改文本编辑器"></a>修改文本编辑器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Git 默认使用文本编辑器为 Vi 或 Vim，可设置为其他项目</span><br>$ git config --global core.editor <span class="hljs-string">&quot;\&quot;‪D:/common/Notepad++/notepad++.exe\&quot;&quot;</span><br></code></pre></td></tr></table></figure>
<h2 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git config --list<br></code></pre></td></tr></table></figure>
<p>以上的全部修改都可以在 <code>~/.gitconfig</code> 或 <code>/etc/gitconfig</code> 中查看或修改</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[user]</span><br>	<span class="hljs-attr">name</span> = YGwhere<br>	<span class="hljs-attr">email</span> = ygwhere@gmail.com<br><span class="hljs-section">[core]</span><br>	<span class="hljs-attr">editor</span> = <span class="hljs-string">&quot;\&quot;‪D:/common/Notepad++/notepad++.exe\&quot;&quot;</span><br></code></pre></td></tr></table></figure>
<h1 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h1><h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a><code>git init</code></h2><p>用于初始化一个版本库</p>
<p>使用：选择合适文件夹 (路径名尽量不包含中文)，在目录下的命令行中运行该命令，Git 将自动将该文件夹作为仓库，并创建一个名为 <code>.git</code> 的隐藏文件夹，其中包含 Git 版本库中的配置文件。</p>
<h2 id="git-clone-lt-URL-gt"><a href="#git-clone-lt-URL-gt" class="headerlink" title="git clone &lt;URL&gt;"></a><code>git clone &lt;URL&gt;</code></h2><p>从远程仓库 (Github, Gitee等) 中克隆仓库，默认克隆仓库位置位于当前目录下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> &lt;url&gt; [name]<br><span class="hljs-comment"># 可指定拷贝的 git 项目在本地的项目名为 name</span><br></code></pre></td></tr></table></figure>
<h1 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h1><h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a><code>git status</code></h2><p>查看仓库中文件状态，包括仓库中文件的增删改状态，并提示将相关文件添加到暂存区或提交到版本库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git status -s<br><span class="hljs-comment"># -s 参数 : 获得简短的输出</span><br></code></pre></td></tr></table></figure>
<h2 id="git-diff-lt-filename-gt"><a href="#git-diff-lt-filename-gt" class="headerlink" title="git diff &lt;filename&gt;"></a><code>git diff &lt;filename&gt;</code></h2><p>查看工作区中文件与版本库中文件差异。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git diff &lt;filename&gt;<br><span class="hljs-comment"># 显示暂存区和工作区的差异</span><br><br>$ git diff --cached [file] <span class="hljs-comment"># == --staged</span><br><span class="hljs-comment"># 显示暂存区和上一次提交的差异</span><br><br>$ git diff [first-branch]...[second-branch]<br><span class="hljs-comment"># 显示两次提交之间的差异</span><br></code></pre></td></tr></table></figure>
<h2 id="git-add-lt-filename-gt"><a href="#git-add-lt-filename-gt" class="headerlink" title="git add &lt;filename&gt;"></a><code>git add &lt;filename&gt;</code></h2><p>将工作区中文件的修改添加到暂存区。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git add [file1] [file2] ...<br><span class="hljs-comment"># 添加多个文件</span><br><br>$ git add [dir]<br><span class="hljs-comment"># 添加指定目录到暂存区，包括子目录</span><br><br>$ git add .<br><span class="hljs-comment"># 添加当前目录的所有文件夹到暂存区</span><br></code></pre></td></tr></table></figure>
<h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a><code>git commit</code></h2><p>提交暂存区到本地仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git commit -m [message]<br><br><span class="hljs-comment"># -m 参数 : 为此次提交添加备注信息，一般建议添加</span><br><span class="hljs-comment"># -a 参数 : 设置修改文件后不需要执行 git add 命令，直接提交</span><br></code></pre></td></tr></table></figure>
<h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a><code>git reset</code></h2><p>回退版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git reset [--soft | --mixed | --hard] [HEAD]<br><span class="hljs-comment"># --mixed 参数 : 默认可为空，用于重置暂存区的文件与上一次的提交保持一致，工作区文件内容保持不变</span><br><span class="hljs-comment"># -soft 参数 : 用于回退到某个版本</span><br><span class="hljs-comment"># --hard 参数 : 撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交</span><br><br><span class="hljs-comment"># HEAD 说明 : </span><br><span class="hljs-comment">#	HEAD -&gt; 当前版本  HEAD^ -&gt; 上个版本		HEAD^^ -&gt; 上上个版本 ...</span><br><span class="hljs-comment">#	HEAD~0 -&gt; 当前版本	HEAD~1 -&gt; 上个版本	HEAD^2 -&gt; 上上个版本 ...</span><br><br></code></pre></td></tr></table></figure>
<h2 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a><code>git rm</code></h2><p>删除工作区文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git rm &lt;file&gt;<br><span class="hljs-comment"># 将文件从暂存区和工作区中删除</span><br><span class="hljs-comment"># -f 参数 : 删除之前修改过并已经放入暂存区中的文件</span><br><br>$ git rm --cached &lt;file&gt;<br><span class="hljs-comment"># 将文件从暂存区中移除，但保留工作区中文件</span><br><br><span class="hljs-comment"># &lt;file&gt; 同样可以为 &lt;dir&gt; 文件目录，当问目录时将同时删除其子目录</span><br></code></pre></td></tr></table></figure>
<h2 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a><code>git mv</code></h2><p>移动或重命名工作区文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git mv [file][newfile]<br><span class="hljs-comment"># -f 参数 : 强制重命名文件，即使文件名已存在</span><br></code></pre></td></tr></table></figure>
<h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a><code>git log</code></h2><p>查看项目的提交历史</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">log</span><br><br><span class="hljs-comment"># --oneline : 查看历史记录的简洁版本</span><br><span class="hljs-comment"># --graph : 将历史中的分支与合并用拓扑图的形式表现出来</span><br><span class="hljs-comment"># --reverse : 逆向显示全部日志</span><br><span class="hljs-comment"># --author : 查找指定用户的提交日志，--author=ygwhere</span><br></code></pre></td></tr></table></figure>
<h2 id="git-blame"><a href="#git-blame" class="headerlink" title="git blame"></a><code>git blame</code></h2><p>查看指定文件的修改记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git blame &lt;filename&gt;<br><span class="hljs-comment"># 以列表形式显示修改记录</span><br></code></pre></td></tr></table></figure>
<h1 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h1><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a><code>git remote</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git remote -v<br><span class="hljs-comment"># 显示所有远程仓库</span><br>origin  https://github.com/YGwhere/BlogSrcBak.git (fetch)<br>origin  https://github.com/YGwhere/BlogSrcBak.git (push)<br><span class="hljs-comment"># origin 为远程地址别名</span><br><br>$ git remote show [remote]<br><span class="hljs-comment"># 显示某个远程仓库的信息</span><br><br>$ git remote add [shortname] [url]<br><span class="hljs-comment"># 添加远程版本库</span><br></code></pre></td></tr></table></figure>
<h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a><code>git fetch</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git merge<br><span class="hljs-comment"># 从远程仓库提取数据并尝试合并到当前分支</span><br><br>$ git merge [<span class="hljs-built_in">alias</span>]/[branch]  <span class="hljs-comment"># git merge origin/master</span><br><span class="hljs-comment"># 将服务器上任何更新合并到当前分支</span><br><br>$ git fetch [<span class="hljs-built_in">alias</span>]		<span class="hljs-comment"># git fetch origin</span><br><span class="hljs-comment"># 从远程仓库获取远程仓库中有而本地没有的数据</span><br></code></pre></td></tr></table></figure>
<h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a><code>git pull</code></h2><p>从远程获取代码并合并本地的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git pull &lt;remote host&gt;&lt;remote branch&gt;:&lt;<span class="hljs-built_in">local</span> branch&gt;   <span class="hljs-comment"># 拉取到当前分支，本地分支名可省</span><br><span class="hljs-comment"># == git fetch + git merge FETCH_HEAD</span><br><br><span class="hljs-comment"># 将远程主机 origin 中的 main 分支拉取到本地的branchtest</span><br><span class="hljs-comment"># git pull origin main:brantest</span><br></code></pre></td></tr></table></figure>
<h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a><code>git push</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git push &lt;remote host&gt;&lt;remote branch&gt;:&lt;<span class="hljs-built_in">local</span> branch&gt;   <span class="hljs-comment"># 拉取到当前分支，本地分支名可省</span><br><span class="hljs-comment"># git push origin main:main</span><br><br><span class="hljs-comment"># 当本地版本与远程版本有差异，可以使用 --force 参数强制推送</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>others</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>数据链路层概述</title>
    <url>/2021/04/21/network/DataLink/</url>
    <content><![CDATA[<blockquote>
<p>数据链路层是OSI参考模型的第二层，其最基本的服务是将源自物理层来的数据可靠地传输到相邻节点的目标机网络层。</p>
</blockquote>
<h1 id="一、数据链路层的任务"><a href="#一、数据链路层的任务" class="headerlink" title="一、数据链路层的任务"></a>一、数据链路层的任务</h1><p>数据链路层主要有两个功能 ：帧编码和误差纠正控制</p>
<h2 id="1-1-数据链路层的相关概念"><a href="#1-1-数据链路层的相关概念" class="headerlink" title="1.1 数据链路层的相关概念"></a>1.1 数据链路层的相关概念</h2><p><strong>节点</strong>：运行链路层协议的任何设备；</p>
<p><strong>链路</strong>：沿通信路径连接相邻节点的物理线路；</p>
<p><strong>帧</strong>：数据链路层协议数据单元，帧的结构由链路层协议规定，一个帧由一个数据字段（封装了网络层数据报）和若干首部字段组成；</p>
<p><strong>网络适配器</strong>（网络接口卡NIC）：链路层的主体实现部分，核心是链路层控制器，一般包含了数据链路层和物理层两层的功能。</p>
<h2 id="1-2-三个基本问题"><a href="#1-2-三个基本问题" class="headerlink" title="1.2 三个基本问题"></a>1.2 三个基本问题</h2><h3 id="1-2-1-封装成帧"><a href="#1-2-1-封装成帧" class="headerlink" title="1.2.1 封装成帧"></a>1.2.1 封装成帧</h3><p>指在一段数据（IP数据报）的前后添加首部和尾部，构成一个帧，从而进行<strong>帧定界</strong>；当数据是ASCLL码组成的文本文件时，可以使用特殊帧定界符（SOH - 0x01 作为帧开始符，EOT - 0x04 作为帧结束符）。同时，所有的数据链路层协议都定义了数据部分长度上限即<strong>最大传输单元 MTU</strong>，即IP数据报的长度不能超过MTU。以太网的MTU一般为1500字节，所以IP数据报的总长度不能超过1500字节。</p>
<h3 id="1-2-2-透明传输"><a href="#1-2-2-透明传输" class="headerlink" title="1.2.2 透明传输"></a>1.2.2 透明传输</h3><p>使数据字段中的某个字节的二进制代码与控制字符SOH或EOT混淆，即将数据字段看作透明不存在一般。采取的方法一般是字节填充或字符填充：发送端的数据链路层在数据字段中的SOH或EOT字段前添加一个转义字符ESC(0x1B)，当转义字符也存在于数据字段中，同样在其前面添加一个转义字符，而接收端的数据链路层在将数据传输到网络层前删除数据字段中的转义字符。</p>
<h3 id="1-2-3-差错检测"><a href="#1-2-3-差错检测" class="headerlink" title="1.2.3 差错检测"></a>1.2.3 差错检测</h3><p>在传输过程中可能发生<strong>比特差错</strong>，而一段时间内，传输错误的比特占传输比特总数的比率称为<strong>误码率BER</strong>。</p>
<p>由于信息链路并非理想的，所以必须采用各种差错检测措施。在此介绍三种差错检测的技术：奇偶校验、校验和、循环冗余检测。</p>
<p>差错控制技术：发现差错后如何进行处理。接收方检测和纠正差错的能力被称为<strong>前向纠错FEC</strong>，常用<strong>海明码</strong>可单独用于网络环境中，或与另一种差错控制方式 <strong>ARQ</strong>（自动重传请求）技术一同使用。</p>
<h4 id="a、奇偶校验"><a href="#a、奇偶校验" class="headerlink" title="a、奇偶校验"></a>a、奇偶校验</h4><p>奇偶校验PCC：对于信息 $D$ 中 $d$ 个比特，只需附加一个比特，使得该 $d+1$ 个比特中 $1$ 的总数是偶数，该方法称之为偶校验方案。同样，奇校验方案则使 $1$ 的总数为奇数。</p>
<p>特点：原理简单，校验迅速，且附加比特少，但当发生一个以上的比特差错时，将无法保证检验结果。</p>
<p>在单比特奇偶校验方案的基础上，可以演化为<strong>二维奇偶校验</strong>方案，通过行校验和列校验可以实现的单个比特差错的识别，甚至纠正该错误。而对于一个分组中的两个比特差错的任意组合也同样可以检测出来。</p>
<p><img src="https://cdn.jsdelivr.net/gh/YGwhere/JsdelivrCDN/img/CN/DataLink/1.jpg" alt=""></p>
<p>奇偶校验应用的例子：商品UPC条形码中数据比特就是采用奇校验进行辅助检测的。</p>
<h4 id="b、校验和"><a href="#b、校验和" class="headerlink" title="b、校验和"></a>b、校验和</h4><p><strong>校验和checksum</strong>的原理是将d个比特数据作为一个k比特整数序列处理，将序列中全部比特整数相加，同时丢弃溢出的高位，将最终结果作为校验码附加在数据中。接收方只需要将所有比特数据作为k比特整数序列相加，判断得到的结果是否全部为 $1$ 来判断是否发送了比特差错。</p>
<p>在TCP和UDP中使用的就是16位比特的校验和。 </p>
<h4 id="c、循环冗余检测"><a href="#c、循环冗余检测" class="headerlink" title="c、循环冗余检测"></a>c、循环冗余检测</h4><p>循环冗余检测CRC是根据文件或数据包产生简短<strong>固定位数校验码</strong>的一种信道编码技术，在此用作数据链路层的一种<strong>检错方式</strong>。</p>
<p>原理：在发送端将数据划分为组，每组为$K$个比特，假设发送数据为 $M=101001 (K = 6)$ ，则在 $M$ 后面添加 $n$ 位<strong>冗余码</strong>（其为帧校验检测序列FCS，仅代表802.3帧或Ethernet帧的最后一个字段（4字节），在检错方法上可选用其他非CRC的方法）。构成了 $K + n$ 位大小的帧发送出去。</p>
<p>先采用二进制的<strong>模2运算</strong>（模2运算时加法不进位，减法不借位）进行 $2^n$ 乘 $M$ 的运算（等同于在 $M$ 后添加 n 个 0），用得到的 $K+n$ 位的数同样使用模2运算的除法（等同于异或XOR）除以事先规定的长度为 $n+1$ 位的除数 $Q$ ，从而得到 $n$ 位的余数 $R$。</p>
<p>余数$R$ 将作为FCS添加在 $M$ 后，构成一个 $K+n$ 位的帧。接收端校验时，将该帧除以规定好的除数 $Q$，若 $R=0$ ，则判断该帧无差错（因为误码后，得到的余数仍为0的概率很小）；若 $R \neq 0$ ，则判断该帧有差错，丢弃该帧。</p>
<p>为方便表达，除数 $Q$ 采用多项式 $P(X) = X^3+X^2+1$ 表示 ，称该多项式为<strong>生成多项式</strong>。</p>
<p><a href="https://tools.lddgo.net/encrypt/crc">在线CRC计算工具与常用生成多项式查询</a></p>
<p>通过采用CRC校验，只可以向上提供<strong>无比特差错</strong>传输，但实现类似TCP形式的<strong>可靠传输</strong>还需要<strong>帧编号</strong>、<strong>确认</strong>和<strong>重传机制</strong>用来解决<strong>帧丢失</strong>、<strong>帧重复</strong>、<strong>帧失序</strong>的传输差错。</p>
<h1 id="二、使用点对点信道的数据链路层"><a href="#二、使用点对点信道的数据链路层" class="headerlink" title="二、使用点对点信道的数据链路层"></a>二、使用点对点信道的数据链路层</h1><p><img src="https://cdn.jsdelivr.net/gh/YGwhere/JsdelivrCDN/img/CN/DataLink/2.jpg" alt=""></p>
<p>在过去局域网中的数据链路层协议有过面向字符的BSC协议、面向比特的SDLC和HDLC协议<sup><a href="#fn_1" id="reffn_1">1</a></sup>，但如今PPP协议已成为非常广泛的广域网数据链路层协议。</p>
<h2 id="2-1-应用：点对点协议PPP"><a href="#2-1-应用：点对点协议PPP" class="headerlink" title="2.1 应用：点对点协议PPP"></a>2.1 应用：点对点协议PPP</h2><p>PPP协议作为第二层网络协议，无需实现TCP协议那样复杂的功能，而在简单的IP协议之下，也无需提供比IP协议更多的功能，因此应满足<strong>简单</strong>的需求。同时，需要保证链路层协议的三个基本问题（<strong>封装成帧</strong>、<strong>透明性</strong>、<strong>差错检测</strong>）。</p>
<p>为了向上兼容，保证多种网络层协议能够在同一物理链路上运行，需要PPP协议支持<strong>多种网络协议</strong>。而向下兼容，就得支持在<strong>多种类型链路</strong>上运行。为了及时发现故障，则保证其能够<strong>检测连接状态</strong>。而为了标准化，需要确定<strong>最大传送单元MTU</strong>（可载荷数据部分最大长度）。而对于两个网络层，需要<strong>网络层地址协商</strong>，来确定传输的两端。</p>
<p>PPP协议由<strong>封装</strong>（将不同网络层协议同时在同一链路传输的多路复用技术）、<strong>链路控制协议LCP</strong>、<strong>网络控制协议NCP</strong>。</p>
<h3 id="2-1-1-PPP协议的帧格式"><a href="#2-1-1-PPP协议的帧格式" class="headerlink" title="2.1.1 PPP协议的帧格式"></a>2.1.1 PPP协议的帧格式</h3><p><img src="https://cdn.jsdelivr.net/gh/YGwhere/JsdelivrCDN/img/CN/DataLink/3.png" alt=""></p>
<p><strong>标志字段F</strong>：首部的第一个字段和尾部的第二个字段，规定为 0x7E（01111110），为PPP帧的定界符。实现了<strong>封装成帧</strong>。当连续出现两个标志字段，则代表这是空帧。</p>
<p><strong>地址字段A</strong>（0xFF = 11111111）、<strong>控制字段</strong>（0x03 = 00000011）并不携带PPP帧的信息。</p>
<p><strong>协议字段</strong>：2个字节，C = 0x0021 时，为IP数据报，当 C = 0xC021，为LCP的数据，0x8021代表网络层的控制数据。</p>
<p><strong>信息字段</strong>：长度可变。PPP中规定不能超过1500字节。</p>
<h3 id="2-1-2-PPP协议实现透明传输"><a href="#2-1-2-PPP协议实现透明传输" class="headerlink" title="2.1.2 PPP协议实现透明传输"></a>2.1.2 PPP协议实现透明传输</h3><p>而为了保证<strong>透明性</strong>，防止信息字段中存在标志字段一样的比特组合使识别时发送混淆，在<strong>异步传输</strong>（逐个字符传送）时，PPP协议将转义字符定义为 0x7D， 对信息字段采用了<strong>字节填充</strong>的手段：</p>
<ul>
<li>将信息字段中的每一个 0x7E 字节转换为 2 字节序列（0x7D, 0x5E）；</li>
<li>将每一个 0x7D 字节转换为 2 字节序列（0x7D, 0x5D）；</li>
<li>在 ASCII 码的控制字符（数值小于 0x20 的字符）前，添加一个 0x7D 字节，同时将该字符编码改变（原字节加上 0x20 ）。例如 0x03 变为 (0x7D, 0x23)。</li>
</ul>
<p>而在 SONET/SDH 链路是采用<strong>同步传输</strong>（一连串的比特连续传送），此时，对信息字段采用<strong>零比特填充</strong>：</p>
<ul>
<li>发送端扫码整个信息字段，当发现存在 5 个连续的 1 时，在后面添加一个 0，保证不会存在 6 个 1（保证了信息字段中不可能存在 01111110 ，即标志字段）。</li>
<li>接收方先确定帧边界，再讲信息字段中存在的 5 个连续的 1 后的 0 删去。</li>
</ul>
<h3 id="2-1-3-PPP协议的工作状态"><a href="#2-1-3-PPP协议的工作状态" class="headerlink" title="2.1.3 PPP协议的工作状态"></a>2.1.3 PPP协议的工作状态</h3><p><img src="https://cdn.jsdelivr.net/gh/YGwhere/JsdelivrCDN/img/CN/DataLink/4.png" alt=""></p>
<ol>
<li><strong>链路静止</strong>：ISP与用户电脑中不存在物理层连接；</li>
<li><strong>链路建立</strong>：用户电脑通过调制解调器呼叫路由器，路由器检测到其发送的载波信号，建立物理层连接，从而实现建立链路层 LCP 连接；<em>（包含了物理层内容）</em></li>
<li><strong>配置协商</strong>：建立链路后，协商<strong>配置选项</strong>（通过一方发送 LCP 配置请求帧 -&gt; PPP帧），而另一方可以响应：配置确认帧、配置否认帧、配置拒绝帧（无法识别部分选项或不能接受）。配置选项包括：最大帧长、鉴别协议、是否使用 PPP 帧中的地址和控制字段等；</li>
<li><strong>鉴别</strong>：此时只允许传送 LCP 协议的分组、鉴别协议的分组、监测链路质量的分组。<br><strong>口令鉴别协议PAP</strong>：一方发送身份标识符和口令（即拨号时的账号与密码），可尝试若干次；<br><strong>口令握手鉴别协议CHAP</strong>：若鉴别失败，则<strong>链路终止</strong>，成功，进入<strong>网络层协议</strong>状态；</li>
<li><strong>网络层协议</strong>：两端的网络控制协议NCP，根据网络层不同协议，相互交换网络层特定的网络控制分组，<em>（包含了网络层内容）</em><br>当运行的是IP协议时，配置IP协议模块时（例如分配IP地址），使用NCP中支持IP协议的 <strong>IP控制协议IPCP</strong>（封装成 PPP帧）；</li>
<li><strong>链路打开</strong>：此时可两端可相互发送分组，并通过<strong>回送请求LCP分组</strong>和<strong>回送回答LCP分组</strong>检查链路状态（当发现链路故障时，也将转向链路终止）；</li>
<li>通过一端发送<strong>终止请求LCP分组</strong>，另一端发送<strong>终止确认LCP分组</strong>，转到<strong>链路终止</strong>状态；</li>
<li>当调制解调器停止发送载波时，则回到链路静止。</li>
</ol>
<h1 id="三、使用广播信道的数据链路层"><a href="#三、使用广播信道的数据链路层" class="headerlink" title="三、使用广播信道的数据链路层"></a>三、使用广播信道的数据链路层</h1><p>广播的方式是指通过向所有站点发送分组，从而传输信息。而广播信道的分配策略主要包括<strong>静态分配</strong>（预先规定频率或时隙，相互不干扰，包括<strong>频分多路复用</strong>和<strong>同步时分多路复用</strong>）和<strong>动态分配</strong>（本质属于异步时分复用，包括<strong>随机访问</strong>和<strong>控制访问</strong>）两大类。常见的采用广播方式传输分组信息的有：无线广播电台、局域网等。</p>
<p>而对于广播链路中，主要需要解决多个发送和接收节点之间的协调问题（即多路访问问题），由于所有节点都可以发送帧，而接收节点可能同时接收到多个帧，即发生了<strong>碰撞</strong>。多路访问协议大致可以划分为：信道划分协议、随机接入协议、轮流协议。</p>
<h2 id="3-1-信道划分协议"><a href="#3-1-信道划分协议" class="headerlink" title="3.1 信道划分协议"></a>3.1 信道划分协议</h2><p>信道划分协议一般有：频分复用FDM、时分复用TDM、波分复用、码分多址CDMA、统计时分复用STDM（属动态分配），在物理层中介绍过了，这里偷个懒ヽ(￣▽￣)ﾉ</p>
<h2 id="3-2-随机接入协议"><a href="#3-2-随机接入协议" class="headerlink" title="3.2 随机接入协议"></a>3.2 随机接入协议</h2><p>在随机接入协议中，每个节点都可以用信道的全部速率发送分组，而当发生了碰撞时，节点将反复重发其帧（但不是马上，而会等待一个随机时延）。</p>
<h3 id="a、时隙ALOHA"><a href="#a、时隙ALOHA" class="headerlink" title="a、时隙ALOHA"></a>a、时隙ALOHA</h3><p>假设信道的全部速率为 $R \ bps$ ，所有帧由 $L$ 比特或者更少比特组成，则将时间划分为 $L/R$ 秒的时隙（保证一个时隙可以传输一帧）。而每个节点都是同步的（保证了每个节点的时隙开始是一致的），而一个时隙中发生了帧碰撞，全部节点都将在该时隙结束前检测到该碰撞事件（保证发送节点下一次可以重发该帧，而不是发送下一帧）。</p>
<p>设置一个概率 $p$，则当发生了碰撞时，该节点将以概率 $p$ 在每个时隙中重传该帧。</p>
<p><img src="https://cdn.jsdelivr.net/gh/YGwhere/JsdelivrCDN/img/CN/DataLink/5.png" alt=""></p>
<p>假设共有 $N$ 个活跃节点需要通过共享信道发送分组，则一个指定节点成功传送的概率为 $p(1-p)^{N-1}$ ，而任意一个节点成功传送的概率为 $Np(1-p)^{N-1}$。</p>
<p>当求出使其最大效率的 $p^<em>$ 时，令 $N$ 无穷大，可得<em>*效率</em></em>为 $1/e=0.37$，即成功时隙仅占总时隙的 $37$%。</p>
<p>总得来说，时隙ALOHA满足了多路访问协议的<strong>简单</strong>、当只有一个活跃节点时其能有最大吞吐量的特性，但当节点增多时，其效率将快速下降，同时，其不能保证<strong>分散</strong>，因为每个节点都应对时隙同步。</p>
<h3 id="b、ALOHA"><a href="#b、ALOHA" class="headerlink" title="b、ALOHA"></a>b、ALOHA</h3><p>相较于时隙ALOHA，纯ALOHA并不需要划分时隙，保证了完全分散。当节点检测到碰撞时，在保证传输完碰撞帧后，将立即概率 $p$ 重传该帧，若该次不重传，将等待一帧的传输时间，进行下一次重传判断。</p>
<p><img src="https://cdn.jsdelivr.net/gh/YGwhere/JsdelivrCDN/img/CN/DataLink/6.png" alt=""></p>
<p>而一个指定节点能够在 $[t_0, t_0+1]$ 内能够成功发送分组，则需要其他节点不能在 $[t_0-1, t_0+1]$ 内都不开始传输分组，则概率为 $p(1-p)^{2(N-1)}$ ，求出概率为 $1/(2e)$ 。</p>
<h3 id="c、载波侦听多路访问CSMA"><a href="#c、载波侦听多路访问CSMA" class="headerlink" title="c、载波侦听多路访问CSMA"></a>c、载波侦听多路访问CSMA</h3><p>CSMA中引入了<strong>载波侦听</strong>（一个节点在传输前先侦听信道）的概念。在理想状态下，CSMA进行了载波侦听后，将如同人说话之前先听是否有人说话一样，不会发送碰撞。但在现实生活中，存在<strong>信道传播时延</strong>，就可能发生碰撞。</p>
<p><img src="https://cdn.jsdelivr.net/gh/YGwhere/JsdelivrCDN/img/CN/DataLink/7.jpg" style="zoom: 50%;" /></p>
<h3 id="d、具有碰撞检测的载波侦听多路访问CSMA-CD"><a href="#d、具有碰撞检测的载波侦听多路访问CSMA-CD" class="headerlink" title="d、具有碰撞检测的载波侦听多路访问CSMA/CD"></a>d、具有碰撞检测的载波侦听多路访问CSMA/CD</h3><p>而由于每次发送碰撞后，节点都将发送完整个帧，导致存在时间浪费。因而在 CSMA/CD 中引入了<strong>碰撞检测</strong>的概念，当检测到发送碰撞后，节点都将立即停止分组的传输。而以太网采取的就是 CSMA/CD </p>
<p><img src="https://cdn.jsdelivr.net/gh/YGwhere/JsdelivrCDN/img/CN/DataLink/8.jpg" style="zoom:50%;" /></p>
<p>而当发生碰撞后，CSMA 规定节点将等待一个随机时间量后再进行重传。这里选择了<strong>二进制指数退避算法</strong>：</p>
<p>当第 $n$ 次重传时，节点随机从 ${0,1,2, \ldots, 2^n-1}$ 中随机选取一个 $K$ 值，作为等待时隙个数，即在 $K \cdot 2t$ 时间后再进行重传（$2t$ 为端到端的往返时间）；<br>为了限制其多次碰撞后增长速度过快，$n = Min[冲突次数, 10]$，即 $n$ 大于 $10$ 时，$n = 10$ ；<br>而为了防止链路故障或者其他导致多次冲突情况出现时，节点能够自动停止发送，设置当冲突次数超过 $16$ 次后，发送失败，丢弃传输的帧，发送错误报告。</p>
<p><img src="https://cdn.jsdelivr.net/gh/YGwhere/JsdelivrCDN/img/CN/DataLink/9.png" alt=""></p>
<p><strong>CSMA/CD 的限制</strong>：由于CSMA/CD 采用的是<strong>边发送边检测</strong>的机制，为了令 $A$ 能够检测到在 $B$ 处发生的碰撞，应当满足条件：</p>
<script type="math/tex; mode=display">
\begin{align}
L/R \ & \geq \ 2d_{max}/V \\
\Longrightarrow L_{min}/R \ & = \ 2d_{max}/V \\
\Longrightarrow L_{min}/R \ & = \ RTT_{max}
\end{align}</script><p>其中 网络带宽：$R\ (bps)$ ，数据帧最小长度：$L<em>{min} \ (bits)$，信号传播速度：$V \ (m/s)$，$A \ B$ 两处即任意两处节点的最大距离： $d</em>{max} (m)$，由于一般情况下 $d<em>{max}$ 和 $V$ 的值是固定的，则信号传播最大往返时间 $RTT</em>{max}=2d_{max}/V$；</p>
<p><strong>CSMA/CD 效率</strong>：采用 CSMA/CD 进行分组传输，当只有一个节点时，其能够以信道全速率进行传输。而当存在多个活跃节点有大量帧发送时，设 CSMA/CD 效率为 $\eta$ ，则其代表无碰撞传输的部分时间占总运行时间的份额。令 $d<em>{prop}$ 表示信号能量在任意两个适配器之间传播所需最大时间，而 $d</em>{trans}$ 表示传输一个最大长度的以太网帧的时间。则 ：</p>
<script type="math/tex; mode=display">
\eta = \frac1{1 + 5d_{prop}/d_{trans}}</script><h2 id="3-3-轮流协议"><a href="#3-3-轮流协议" class="headerlink" title="3.3 轮流协议"></a>3.3 轮流协议</h2><p>由于ALOHA和CSMA都只满足了 ①只有一个活跃节点时，该节点具有 $R \ bps$ 的吞吐量，而不能满足 ② 当有 $M$ 个活跃节点时，每个节点吞吐量接近 $R/M \ bps$。因此根据第二个特性创造了轮流协议。其包含两种比较重要的协议：<strong>轮询协议</strong>、<strong>令牌传递协议</strong>。</p>
<p>轮询协议的应用：802.15协议、蓝牙协议</p>
<p><a href="https://baike.baidu.com/item/%E4%BB%A4%E7%89%8C%E7%8E%AF">令牌传递协议</a>的应用：<a href="https://baike.baidu.com/item/%E5%85%89%E7%BA%A4%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E6%8E%A5%E5%8F%A3">光纤分布式数据接口（FDDI）协议</a>、IEEE 802.5 令牌环协议</p>
<h1 id="四、交换局域网"><a href="#四、交换局域网" class="headerlink" title="四、交换局域网"></a>四、交换局域网</h1><h2 id="4-1-广播信道的应用：局域网"><a href="#4-1-广播信道的应用：局域网" class="headerlink" title="4.1 广播信道的应用：局域网"></a>4.1 广播信道的应用：局域网</h2><h2 id="4-2-以太网"><a href="#4-2-以太网" class="headerlink" title="4.2 以太网"></a>4.2 以太网</h2><h2 id="4-3-扩展的以太网"><a href="#4-3-扩展的以太网" class="headerlink" title="4.3 扩展的以太网"></a>4.3 扩展的以太网</h2><h1 id="五、数据链路层设备"><a href="#五、数据链路层设备" class="headerlink" title="五、数据链路层设备"></a>五、数据链路层设备</h1><h2 id="5-1-网卡"><a href="#5-1-网卡" class="headerlink" title="5.1 网卡"></a>5.1 网卡</h2><h2 id="5-2-网桥"><a href="#5-2-网桥" class="headerlink" title="5.2 网桥"></a>5.2 网桥</h2><h2 id="5-3-链路层交换机"><a href="#5-3-链路层交换机" class="headerlink" title="5.3 链路层交换机"></a>5.3 链路层交换机</h2><h1 id="六、参考文档"><a href="#六、参考文档" class="headerlink" title="六、参考文档"></a>六、参考文档</h1><p>关于BSC、SDLC、HDLC协议：<a href="https://zhuanlan.zhihu.com/p/52665008">https://zhuanlan.zhihu.com/p/52665008</a></p>
]]></content>
      <categories>
        <category>Computer Network</category>
      </categories>
  </entry>
</search>
